//
// Generated by JTB 1.3.2
//

package kanga.visitor;

import kanga.syntaxtree.*;

import java.util.Enumeration;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    @Override
    public void visit(NodeList n) {
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    @Override
    public void visit(NodeListOptional n) {
        if (n.present())
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
                e.nextElement().accept(this);
    }

    @Override
    public void visit(NodeOptional n) {
        if (n.present())
            n.node.accept(this);
    }

    @Override
    public void visit(NodeSequence n) {
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    @Override
    public void visit(NodeToken n) { }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( Procedure() )*
     * f13 -> <EOF>
     */
    @Override
    public void visit(Goal n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        n.f13.accept(this);
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    @Override
    public void visit(StmtList n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     */
    @Override
    public void visit(Procedure n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
    }

    /**
     * f0 -> NoOpStmt()
     * | ErrorStmt()
     * | CJumpStmt()
     * | JumpStmt()
     * | HStoreStmt()
     * | HLoadStmt()
     * | MoveStmt()
     * | PrintStmt()
     * | ALoadStmt()
     * | AStoreStmt()
     * | PassArgStmt()
     * | CallStmt()
     */
    @Override
    public void visit(Stmt n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> "NOOP"
     */
    @Override
    public void visit(NoOpStmt n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> "ERROR"
     */
    @Override
    public void visit(ErrorStmt n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Reg()
     * f2 -> Label()
     */
    @Override
    public void visit(CJumpStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    @Override
    public void visit(JumpStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Reg()
     * f2 -> IntegerLiteral()
     * f3 -> Reg()
     */
    @Override
    public void visit(HStoreStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Reg()
     * f2 -> Reg()
     * f3 -> IntegerLiteral()
     */
    @Override
    public void visit(HLoadStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Reg()
     * f2 -> Exp()
     */
    @Override
    public void visit(MoveStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    @Override
    public void visit(PrintStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> "ALOAD"
     * f1 -> Reg()
     * f2 -> SpilledArg()
     */
    @Override
    public void visit(ALoadStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> "ASTORE"
     * f1 -> SpilledArg()
     * f2 -> Reg()
     */
    @Override
    public void visit(AStoreStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> "PASSARG"
     * f1 -> IntegerLiteral()
     * f2 -> Reg()
     */
    @Override
    public void visit(PassArgStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     */
    @Override
    public void visit(CallStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> HAllocate()
     * | BinOp()
     * | SimpleExp()
     */
    @Override
    public void visit(Exp n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    @Override
    public void visit(HAllocate n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> Operator()
     * f1 -> Reg()
     * f2 -> SimpleExp()
     */
    @Override
    public void visit(BinOp n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * f0 -> "LT"
     * | "PLUS"
     * | "MINUS"
     * | "TIMES"
     */
    @Override
    public void visit(Operator n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> "SPILLEDARG"
     * f1 -> IntegerLiteral()
     */
    @Override
    public void visit(SpilledArg n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * f0 -> Reg()
     * | IntegerLiteral()
     * | Label()
     */
    @Override
    public void visit(SimpleExp n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> "a0"
     * | "a1"
     * | "a2"
     * | "a3"
     * | "t0"
     * | "t1"
     * | "t2"
     * | "t3"
     * | "t4"
     * | "t5"
     * | "t6"
     * | "t7"
     * | "s0"
     * | "s1"
     * | "s2"
     * | "s3"
     * | "s4"
     * | "s5"
     * | "s6"
     * | "s7"
     * | "t8"
     * | "t9"
     * | "v0"
     * | "v1"
     */
    @Override
    public void visit(Reg n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    @Override
    public void visit(IntegerLiteral n) {
        n.f0.accept(this);
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    @Override
    public void visit(Label n) {
        n.f0.accept(this);
    }

}
