//
// Generated by JTB 1.3.2
//

package kanga.syntaxtree;

import kanga.visitor.GJNoArguVisitor;
import kanga.visitor.GJVisitor;
import kanga.visitor.GJVoidVisitor;
import kanga.visitor.Visitor;

import java.util.Enumeration;
import java.util.Vector;

/**
 * Represents a sequence of nodes nested within a choice, list,
 * optional list, or optional, e.g. ( A B )+ or [ C D E ]
 */
public class NodeSequence implements NodeListInterface {
    private static final long serialVersionUID = -2274201552798013712L;
    public Vector<Node> nodes;

    public NodeSequence(int n) {
        nodes = new Vector<Node>(n);
    }

    public NodeSequence(Node firstNode) {
        nodes = new Vector<Node>();
        addNode(firstNode);
    }

    @Override
    public void addNode(Node n) {
        nodes.addElement(n);
    }

    @Override
    public Node elementAt(int i) { return nodes.elementAt(i); }

    @Override
    public Enumeration<Node> elements() { return nodes.elements(); }

    @Override
    public int size() { return nodes.size(); }

    @Override
    public void accept(Visitor v) {
        v.visit(this);
    }

    @Override
    public <R, A> R accept(GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    @Override
    public <R> R accept(GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    @Override
    public <A> void accept(GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}

