//
// Generated by JTB 1.3.2
//

package spiglet.visitor;

import spiglet.syntaxtree.*;

/**
 * All void visitors must implement this interface.
 */

public interface Visitor {

    //
    // void Auto class visitors
    //

    void visit(NodeList n);

    void visit(NodeListOptional n);

    void visit(NodeOptional n);

    void visit(NodeSequence n);

    void visit(NodeToken n);

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    void visit(Goal n);

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    void visit(StmtList n);

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    void visit(Procedure n);

    /**
     * f0 -> NoOpStmt()
     * | ErrorStmt()
     * | CJumpStmt()
     * | JumpStmt()
     * | HStoreStmt()
     * | HLoadStmt()
     * | MoveStmt()
     * | PrintStmt()
     */
    void visit(Stmt n);

    /**
     * f0 -> "NOOP"
     */
    void visit(NoOpStmt n);

    /**
     * f0 -> "ERROR"
     */
    void visit(ErrorStmt n);

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    void visit(CJumpStmt n);

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    void visit(JumpStmt n);

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    void visit(HStoreStmt n);

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    void visit(HLoadStmt n);

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    void visit(MoveStmt n);

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    void visit(PrintStmt n);

    /**
     * f0 -> Call()
     * | HAllocate()
     * | BinOp()
     * | SimpleExp()
     */
    void visit(Exp n);

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    void visit(StmtExp n);

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    void visit(Call n);

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    void visit(HAllocate n);

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    void visit(BinOp n);

    /**
     * f0 -> "LT"
     * | "PLUS"
     * | "MINUS"
     * | "TIMES"
     */
    void visit(Operator n);

    /**
     * f0 -> Temp()
     * | IntegerLiteral()
     * | Label()
     */
    void visit(SimpleExp n);

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    void visit(Temp n);

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    void visit(IntegerLiteral n);

    /**
     * f0 -> <IDENTIFIER>
     */
    void visit(Label n);

}

