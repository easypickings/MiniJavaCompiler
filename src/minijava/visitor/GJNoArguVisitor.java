//
// Generated by JTB 1.3.2
//

package minijava.visitor;

import minijava.syntaxtree.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

    //
    // GJ Auto class visitors with no argument
    //

    R visit(NodeList n);

    R visit(NodeListOptional n);

    R visit(NodeOptional n);

    R visit(NodeSequence n);

    R visit(NodeToken n);

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    R visit(Goal n);

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    R visit(MainClass n);

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    R visit(TypeDeclaration n);

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    R visit(ClassDeclaration n);

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    R visit(ClassExtendsDeclaration n);

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    R visit(VarDeclaration n);

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    R visit(MethodDeclaration n);

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    R visit(FormalParameterList n);

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    R visit(FormalParameter n);

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    R visit(FormalParameterRest n);

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegerType()
     * | Identifier()
     */
    R visit(Type n);

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    R visit(ArrayType n);

    /**
     * f0 -> "boolean"
     */
    R visit(BooleanType n);

    /**
     * f0 -> "int"
     */
    R visit(IntegerType n);

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     */
    R visit(Statement n);

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    R visit(Block n);

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    R visit(AssignmentStatement n);

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    R visit(ArrayAssignmentStatement n);

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    R visit(IfStatement n);

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    R visit(WhileStatement n);

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    R visit(PrintStatement n);

    /**
     * f0 -> AndExpression()
     * | CompareExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | PrimaryExpression()
     */
    R visit(Expression n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    R visit(AndExpression n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    R visit(CompareExpression n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    R visit(PlusExpression n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    R visit(MinusExpression n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    R visit(TimesExpression n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    R visit(ArrayLookup n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    R visit(ArrayLength n);

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    R visit(MessageSend n);

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    R visit(ExpressionList n);

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    R visit(ExpressionRest n);

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     * | BracketExpression()
     */
    R visit(PrimaryExpression n);

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    R visit(IntegerLiteral n);

    /**
     * f0 -> "true"
     */
    R visit(TrueLiteral n);

    /**
     * f0 -> "false"
     */
    R visit(FalseLiteral n);

    /**
     * f0 -> <IDENTIFIER>
     */
    R visit(Identifier n);

    /**
     * f0 -> "this"
     */
    R visit(ThisExpression n);

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    R visit(ArrayAllocationExpression n);

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    R visit(AllocationExpression n);

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    R visit(NotExpression n);

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    R visit(BracketExpression n);

}

